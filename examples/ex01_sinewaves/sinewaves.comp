#version 450

#define PI 3.1415926538
#define TAU 2.0 * 3.1415962
#define NUM_WAVES 3
#define INTENSITY 0.001
#define STEPS 32
#define AXIS_BOUND_X 1.0 // x: -1.0 to 1.0
#define AXIS_BOUND_Y 2.0 // y: -2.0 to 2.0
#define PERIOD 1.4

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D img;
layout (push_constant) uniform PUSH { float time; } push;

void main () {
    ivec2 dim = imageSize (img);
    vec2 uv = ((vec2 (gl_GlobalInvocationID.xy) / dim) - vec2(0.5)) * 2.0; // uv: -1.0 to 1.0
    vec3 colour = vec3 (0.0);
    for (int i = 0; i < NUM_WAVES; ++i) {
        for (int j = 0; j <= STEPS; ++j) {
            float ix = float (i) / float (NUM_WAVES);
            vec2 r = 1.0 / vec2 (AXIS_BOUND_X, AXIS_BOUND_Y);
            float step = r.x * 2.0 / STEPS;
            float x = -r.x + j * step;
            float y = r.y * sin ((x * PERIOD * PI) + (ix * TAU) + push.time);
            float proximity = length (uv - vec2 (x, y)) / (2.0 * max (AXIS_BOUND_X, AXIS_BOUND_Y)); // between 0.0 and 1.0
            colour += (INTENSITY / proximity) * vec3 (ix - x, 1.0 - i * 0.5, ix + x * 1.5);
        }
    }
    
    imageStore (img, ivec2 (gl_GlobalInvocationID.xy), vec4 (colour, 1.0));
}