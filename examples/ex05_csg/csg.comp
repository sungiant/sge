#version 450

#define TREE_NODE 0
#define TREE_LEAF 1

#define CSG_UNION 0
#define CSG_INTERSECTION 1
#define CSG_DIFFERENCE 2

#define SDF_SPHERE 0
#define SDF_CUBE 1
#define SDF_CUBOID 2

const float INFINITY = 1.0 / 0.0;
const float MINIMUM_STEP = 0.00001;
const float TOLERANCE = 0.0001;
const float NORM_SAMPLE = 0.001;
const vec3  AMBIENT_COLOUR = vec3 (0.2, 0.2, 0.2);
const vec3  SPECULAR_COLOUR = vec3 (1, 1, 1);
const float EPSILON = 0.000001;

//-------------------------------------------------------------------------------------------------------------------//

struct Ray { vec3 position; vec3 direction; };

bool is_zero (float f) { return (f >= -EPSILON) && (f <= EPSILON); }

vec3 qtransform (vec3 vector, vec4 q) {
  const float ii = q.x * q.x; const float jj = q.y * q.y; const float kk = q.z * q.z;
  const float ui = q.w * q.x; const float uj = q.w * q.y; const float uk = q.w * q.z;
  const float ij = q.x * q.y; const float ik = q.x * q.z; const float jk = q.y * q.z;
  return vec3 (
    + vector.x - (2.0 * vector.x * (jj + kk)) + (2.0 * vector.y * (ij - uk)) + (2.0 * vector.z * (ik + uj)),
    + vector.y + (2.0 * vector.x * (ij + uk)) - (2.0 * vector.y * (ii + kk)) + (2.0 * vector.z * (jk - ui)),
    + vector.z + (2.0 * vector.x * (ik - uj)) + (2.0 * vector.y * (jk + ui)) - (2.0 * vector.z * (ii + jj)));
}

//-------------------------------------------------------------------------------------------------------------------//

struct Z { float d; int m; }; // encapsulate depth and material id;

float sdf_sphere (vec3 position, vec3 offset, float radius) {
    return length (position - offset) - radius;
}

float sdf_cube (vec3 position, vec3 offset, float size) {

    vec3 d = abs(position - offset) - (vec3 (size, size, size) / 2.0);
    return length (max (vec3 (0.0, 0.0, 0.0), d)) + min (max (d.x, max (d.y, d.z)), 0.0);
}

float sdf_cuboid (vec3 position, vec3 offset, vec3 size) {
    vec3 q = abs(position - offset) - (size / 2.0);
    return length (max (vec3 (0.0, 0.0, 0.0), q)) + min (max (q.x, max (q.y, q.z)), 0.0);
}

Z sdf_union_m        (Z a, Z b) { return (a.d <= b.d)  ? Z (a.d, a.m) : Z (b.d, b.m); }
Z sdf_intersection_m (Z a, Z b) { return (a.d >= b.d)  ? Z (a.d, a.m) : Z (b.d, a.m); }
Z sdf_difference_m   (Z a, Z b) { return (a.d >= -b.d) ? Z (a.d, a.m) : Z (-b.d, a.m); }

//-------------------------------------------------------------------------------------------------------------------//

struct Material {
    vec3 colour;
    float shininess;
};

struct PointLight {
    vec3 position;
    float range;
    vec3 colour;
    float shadow_factor;
};


struct SceneTreeElement {
    uint type; // type is either Node or Leaf
    int data; // if type is Node, data is the CSG OP type.  if type is Leaf, data is an index into the Shapes array and material id
};


struct Shape {
    vec3 position;
    uint type;
    vec4 data;
};

//-------------------------------------------------------------------------------------------------------------------//

layout (local_size_x = 16, local_size_y = 16) in; // https://www.khronos.org/opengl/wiki/Compute_Shader

layout (binding = 0, rgba8) uniform writeonly image2D img;

layout (push_constant) uniform PUSH // change to push constants
{
    float   time;
    bool    no_change;
} push;

layout (binding = 1) uniform UBO_CAMERA
{
    // 4
    vec3    position;
    int     dummy;
    // 4
    vec4    orientation;
    // 4
    float   fov;
    float   aspect;
    float   near;
    float   far;

} ubo_camera;

layout (binding = 2) uniform UBO_SETTINGS
{
    //4
    int     mode;
    float   gamma;
    int     iterations;
    uint    flags;

    //4
    float   soft_shadow_factor;

} ubo_settings;


layout (binding = 3) buffer Materials
{
    Material sbo_materials[];
};


layout (binding = 4) buffer Lights
{
    PointLight sbo_lights[];
};

layout (binding = 5) buffer Shapes
{
    Shape sbo_scene_shapes[];
};

layout (binding = 6) buffer Tree
{
    SceneTreeElement sbo_scene_tree[];
};

Z sdf_m (vec3 position) { // WIP
    Z HACK[16];

    for (int i = 0; i < HACK.length(); ++i)
    {
        HACK[i] = Z (INFINITY, 0);
    }

    int numCachedResults = 0;

    for (int i = 0; i < sbo_scene_tree.length(); ++i)
    {
        if (sbo_scene_tree[i].type == TREE_LEAF)
        {
            int idx = sbo_scene_tree[i].data & 0xfff;
            int material = (sbo_scene_tree[i].data >> 24) & 0xf;

            if (sbo_scene_shapes[idx].type == SDF_SPHERE) {
                vec3 offset = sbo_scene_shapes[idx].position;
                float radius = sbo_scene_shapes[idx].data.x;
                HACK[numCachedResults].d = sdf_sphere (position, offset, radius);
                HACK[numCachedResults].m = material;
                numCachedResults++;
                continue;
            }

            if (sbo_scene_shapes[idx].type == SDF_CUBE) {
                vec3 offset = sbo_scene_shapes[idx].position;
                float size = sbo_scene_shapes[idx].data.x;
                HACK[numCachedResults].d = sdf_cube (position, offset, size);
                HACK[numCachedResults].m = material;
                numCachedResults++;
                continue;
            }

            if (sbo_scene_shapes[idx].type == SDF_CUBOID) {
                vec3 offset = sbo_scene_shapes[idx].position;
                vec3 size = sbo_scene_shapes[idx].data.xyz;
                HACK[numCachedResults].d = sdf_cuboid (position, offset, size);
                HACK[numCachedResults].m = material;
                numCachedResults++;
                continue;
            }
        }

        if (sbo_scene_tree[i].type == TREE_NODE)
        {
            int op = sbo_scene_tree[i].data;

            if (op == CSG_UNION) {
                HACK[numCachedResults - 2] = sdf_union_m (HACK[numCachedResults - 2], HACK[numCachedResults - 1]);
                numCachedResults -= 1;
                continue;
            }

            if (op == CSG_INTERSECTION) {
                HACK[numCachedResults - 2] = sdf_intersection_m (HACK[numCachedResults - 2], HACK[numCachedResults - 1]);
                numCachedResults -= 1;
                continue;
            }

            if (op == CSG_DIFFERENCE) {
                HACK[numCachedResults - 2] = sdf_difference_m (HACK[numCachedResults - 2], HACK[numCachedResults - 1]);
                numCachedResults -= 1;
                continue;
            }
        }
    }

    return HACK[0];
}

//-------------------------------------------------------------------------------------------------------------------//


struct MarchResult {

    bool has_value;
    float distance;
    float minimumConeRatio;
    int stepCount;
    int material;
};

MarchResult march (Ray ray, float start, float end) {


    float distanceCovered = start;
    float minimumConeRatio = INFINITY;
    int stepsTaken = 0;
    int material = -1;

    while (stepsTaken <= ubo_settings.iterations)
    {
        stepsTaken++;

        Z x = sdf_m (ray.position + (ray.direction * distanceCovered));
        material = x.m;
        float nextStepSize = max (MINIMUM_STEP, x.d);

        //float nextDistanceCovered = max (MINIMUM_STEP, newDistanceCovered);

        distanceCovered += nextStepSize;

        minimumConeRatio = min (minimumConeRatio, nextStepSize / distanceCovered); // this is wrong, always coming out zero

        if (distanceCovered > end) { // We've marched past the end point.
            return MarchResult (false, distanceCovered, minimumConeRatio, stepsTaken, material);
        }

        if (nextStepSize < TOLERANCE) { // Hit! `p` is within `TOLERANCE`, considered on the surface.
            return MarchResult (true, distanceCovered, minimumConeRatio, stepsTaken, material);
        }
    }

    // We've run out of marching steps and not found a sausage.  If a material has not been assigned assume we
    // have hit something, as normally when we run out of iteration steps we are close to something.
    if (material == -1)
        return MarchResult (false, distanceCovered, minimumConeRatio, stepsTaken, material);
    else
        return MarchResult (true, distanceCovered, minimumConeRatio, stepsTaken, material);
}


//-------------------------------------------------------------------------------------------------------------------//

vec3 estimateNormal (vec3 pos) {
    return normalize (vec3 (
      sdf_m (vec3 (pos.x + NORM_SAMPLE, pos.y, pos.z)).d - sdf_m (vec3 (pos.x - NORM_SAMPLE, pos.y, pos.z)).d,
      sdf_m (vec3 (pos.x, pos.y + NORM_SAMPLE, pos.z)).d - sdf_m (vec3 (pos.x, pos.y - NORM_SAMPLE, pos.z)).d,
      sdf_m (vec3 (pos.x, pos.y, pos.z + NORM_SAMPLE)).d - sdf_m (vec3 (pos.x, pos.y, pos.z - NORM_SAMPLE)).d));
}

float estimateAO (vec3 surfacePosition, vec3 surfaceNormal) {
    const float lim = 0.1;

    float step = 0.01;
    float ao = 1.0;

    for (float t = step; t <= lim; t += step)
    {
        vec3 samplePosition = surfacePosition + (surfaceNormal * t);
        float d = abs (sdf_m (samplePosition).d);
        ao = min (ao, d / t);
        t = t + max (d, step);
    }

    return ao;
}

vec2 estimateShadows (vec3 surfacePosition) {
    float shadowStepCount = 0;

    float hardShadow = 0.0f;
    float softShadow = 0.0f;

    float totalIntensity = 0.0;
    int numShadowCastingLights = 0;

    for (int i = 0; i < sbo_lights.length(); ++i)
    {
        if (is_zero (sbo_lights[i].shadow_factor))
            continue;

        numShadowCastingLights++;

        vec3 surfaceToLight = sbo_lights[i].position - surfacePosition;
        float attenuation = sbo_lights[i].range / (1.0 + pow (length (surfaceToLight), 2));

        if (is_zero (attenuation))
            continue;

        totalIntensity += length(sbo_lights[i].colour) * attenuation * sbo_lights[i].shadow_factor;
    }

    for (int i = 0; i < sbo_lights.length(); ++i)
    {
        if (is_zero (sbo_lights[i].shadow_factor))
            continue;

        vec3 surfaceToLight = sbo_lights[i].position - surfacePosition;
        float attenuation = sbo_lights[i].range / (1.0 + pow (length (surfaceToLight), 2)); // https://www.tomdalling.com/blog/modern-opengl/07-more-lighting-ambient-specular-attenuation-gamma/

        float intensity = length (sbo_lights[i].colour);
        float shadowResult = intensity * attenuation * sbo_lights[i].shadow_factor / totalIntensity;

        Ray surfaceToLightRay = Ray (surfacePosition,  normalize(sbo_lights[i].position - surfacePosition));
        float start = 10.0 * TOLERANCE;
        float distanceToEnd = length (sbo_lights[i].position - surfacePosition) - start;

        MarchResult smr = march (surfaceToLightRay, start, distanceToEnd);

        shadowStepCount += smr.stepCount;

        if (smr.has_value == true)
        {
            softShadow += shadowResult;
            hardShadow += shadowResult;

        }
        else // didnt hit, clear path from surface to light, no shadow
        {
            float k = ubo_settings.soft_shadow_factor;
            float z = smr.minimumConeRatio * k;
            softShadow += (1.0 - clamp (z, 0.0, 1.0)) * shadowResult;
        }
    }

    return vec2 (hardShadow, softShadow);

}


vec3 calculateLighting (vec3 surfacePosition, vec3 surfaceNormal, int materialID) {
    const vec3 material_albedo = sbo_materials[materialID].colour;
    const float material_shininess = sbo_materials[materialID].shininess;

    vec3 total_diffuse = vec3 (0);
    vec3 total_specular = vec3 (0);

    for (int i = 0; i < sbo_lights.length(); ++i)
    {
        vec3 surfaceToLight = sbo_lights[i].position - surfacePosition;
        float attenuation = sbo_lights[i].range / (1.0 + pow (length (surfaceToLight), 2)); // https://www.tomdalling.com/blog/modern-opengl/07-more-lighting-ambient-specular-attenuation-gamma/

        //if (is_zero (attenuation)) continue;

        vec3 lightColour = sbo_lights[i].colour;
        float intensity = length (lightColour);
        vec3 N = surfaceNormal;
        vec3 L = normalize (surfaceToLight);
        vec3 V = normalize ((ubo_camera.position - surfacePosition));
        vec3 R = normalize (reflect (-L, N));
        float dotLN = dot (L, N);
        float dotRV = dot (R, V);

        if (dotLN < 0.0)
            continue;

        vec3 diffuse = vec3 (0);
        vec3 specular = vec3 (0);

        if (dotRV < 0.0 || material_shininess <= 0.0)
        {
            diffuse = lightColour * dotLN;
        }
        else
        {
            diffuse = lightColour * dotLN;
            specular = lightColour * SPECULAR_COLOUR * pow (dotRV, material_shininess);
        }

        diffuse *= attenuation;
        specular *= attenuation;

        total_diffuse += diffuse;
        total_specular += specular;
    }

    return (AMBIENT_COLOUR * material_albedo) + (total_diffuse * material_albedo) + total_specular;
}

//-------------------------------------------------------------------------------------------------------------------//

vec4 run(vec2 uv) {

    const float sh = sin (radians (ubo_camera.fov)  / 2.0);
    const vec3 nnw = vec3 (-ubo_camera.near * sh * ubo_camera.aspect,  ubo_camera.near * sh, -ubo_camera.near);
    const vec3 nse = vec3 ( ubo_camera.near * sh * ubo_camera.aspect, -ubo_camera.near * sh, -ubo_camera.near);
    const vec3 fnw = vec3 ( -ubo_camera.far * sh * ubo_camera.aspect,  ubo_camera.far  * sh, -ubo_camera.far);
    const vec3 fsw = vec3 (  ubo_camera.far * sh * ubo_camera.aspect, -ubo_camera.far  * sh, -ubo_camera.far);
    const Ray ray = Ray ( // RIGHT HANDED !
        ubo_camera.position + qtransform (mix (nnw, nse, vec3 (uv, 0.0)), ubo_camera.orientation),
        normalize(qtransform (mix (fnw - nnw, fsw - nse, vec3 (uv, 0.0)), ubo_camera.orientation)));

    // DEPTH
    const float frustumDepth = ubo_camera.far - ubo_camera.near;
    const MarchResult marchResult = march (ray, 0.0, frustumDepth);
    const float depth = marchResult.distance;

    // Got one!
    if (marchResult.has_value == true)
    {
        // POSITION
        const vec3 surfacePosition = ray.position + (ray.direction * depth);

        // NORMAL
        const vec3 surfaceNormal = estimateNormal (surfacePosition);

        // AO
        float ao = 1.0;
        if (((ubo_settings.flags >> 0) & 1u) > 0) {
            ao = estimateAO (surfacePosition, surfaceNormal);
        }

        // SHADOWS
        vec2 shadows = vec2 (0);
        if (((ubo_settings.flags >> 1) & 1u) > 0) {
            shadows = estimateShadows (surfacePosition);
        }

        // LIGHTING
        vec3 lighting = AMBIENT_COLOUR;
        if (((ubo_settings.flags >> 2) & 1u) > 0) {
            lighting = calculateLighting (surfacePosition, surfaceNormal, marchResult.material);
        }

        // COMPOSITE
        const float aoFactor = 0.8;
        const float shadowFactor = 0.9;
        const float aoMultiplier = (1.0 - (1.0 - ao) * aoFactor);
        const float hardShadowMultiplier = (1.0 - shadows.x) * shadowFactor;
        const float softShadowMultiplier = (1.0 - shadows.y) * shadowFactor;

        if (ubo_settings.mode == 1) { return vec4 (depth / 4.0, depth / 20.0, depth / 100.0, 1); }
        if (ubo_settings.mode == 2) { return vec4 (0, 0, marchResult.stepCount / float (ubo_settings.iterations), 1); }
        if (ubo_settings.mode == 3) { return vec4 ((surfaceNormal + vec3 (1)) / 2, 1); }
        if (ubo_settings.mode == 4) { return vec4 (marchResult.minimumConeRatio * 100, marchResult.minimumConeRatio * 1000, marchResult.minimumConeRatio * 10000, 1); }
        if (ubo_settings.mode == 5) { return vec4 (hardShadowMultiplier, hardShadowMultiplier, hardShadowMultiplier, 1); }
        if (ubo_settings.mode == 6) { return vec4 (softShadowMultiplier, softShadowMultiplier, softShadowMultiplier, 1); }
        if (ubo_settings.mode == 7) { return vec4 (aoMultiplier, aoMultiplier, aoMultiplier, 1); }
        if (ubo_settings.mode == 8) { return vec4 (lighting, 1); }

        const vec3 composite = lighting * aoMultiplier * softShadowMultiplier;
        const vec3 gamma  = pow (composite, vec3 (1.0 / ubo_settings.gamma));
        return vec4 (gamma, 1);

    }

    return vec4 (0); // not a sausage
}

//-------------------------------------------------------------------------------------------------------------------//

void main() {
    const ivec2 dim = imageSize (img);
    const vec2 uv = vec2 (float (gl_GlobalInvocationID.x) / float (dim.x), 1.0 - (float (gl_GlobalInvocationID.y) / float (dim.y)));

    if (push.no_change && (((ubo_settings.flags >> 3) & 1u) > 0)) {
        // nothing changed, don't bother
        if ((((ubo_settings.flags >> 4) & 1u) > 0)) { // render markers to show we're not rendering
            if (        gl_GlobalInvocationID.x < 10 &&         gl_GlobalInvocationID.y < 10) { imageStore (img, ivec2 (gl_GlobalInvocationID.xy), vec4 (1, 0, 0, 1)); }
            if (dim.x - gl_GlobalInvocationID.x < 10 && dim.y - gl_GlobalInvocationID.y < 10) { imageStore (img, ivec2 (gl_GlobalInvocationID.xy), vec4 (1, 1, 0, 1)); }
            if (        gl_GlobalInvocationID.x < 10 && dim.y - gl_GlobalInvocationID.y < 10) { imageStore (img, ivec2 (gl_GlobalInvocationID.xy), vec4 (0, 1, 0, 1)); }
            if (dim.x - gl_GlobalInvocationID.x < 10 &&         gl_GlobalInvocationID.y < 10) { imageStore (img, ivec2 (gl_GlobalInvocationID.xy), vec4 (0, 1, 1, 1)); }
        }
    }
    else {
        const vec3 bg = vec3 (.4) * (1. - (length(uv - vec2(0.5)) - .2));
        const vec4 result = run (uv);
        const vec3 composite = (result.rgb * result.a) + (bg.rgb * (1.0 - result.a));
        const vec4 final = vec4 (composite, 1);

        imageStore (img, ivec2 (gl_GlobalInvocationID.xy), final);
    }
}
